#!/usr/bin/env bash
CMD=$1
COMPOSE_FILE=./var/docker-compose.yml

function laradock_init_files() {
	OPTIONS=$1
	cp $OPTIONS resources/config.example.yml config.yml
	cp $OPTIONS resources/env.example .env
	cp $OPTIONS resources/my.example.cnf etc/my.cnf
	cp $OPTIONS resources/xdebug.example.ini etc/xdebug.ini
}

if [[ $CMD == "init" ]]; then
	docker run --rm --interactive --tty \
		-v $PWD:/app \
		composer install --no-dev --no-progress --no-suggest
	laradock_init_files "-i"
	echo "Laradock initialized!"
fi

if [[ $CMD == "up" ]]; then
	docker run --rm -ti -v $PWD:/laradock -w /laradock php:7.2 php src/generate.php
	docker-compose -f $COMPOSE_FILE --project-directory . up -d --remove-orphans ${@:2}
fi

if [[ $CMD == "ssh" ]]; then
	docker-compose -f $COMPOSE_FILE --project-directory . exec -u laradock workspace $(cat ./var/shell)
fi

if [[ $CMD == "root" ]]; then
	docker-compose -f $COMPOSE_FILE --project-directory . exec -u root workspace bash
fi

if [[ $CMD == "down" ]]; then
	docker-compose -f $COMPOSE_FILE --project-directory . down ${@:2}
fi

if [[ $CMD == "ps" ]]; then
	docker-compose -f $COMPOSE_FILE --project-directory . ps ${@:2}
fi

if [[ $CMD == "logs" ]]; then
	docker-compose -f $COMPOSE_FILE --project-directory . logs ${@:2}
fi

if [[ $CMD == "exec" ]]; then
	docker-compose -f $COMPOSE_FILE --project-directory . exec ${@:2}
fi

if [[ $CMD == "restart" ]]; then
	docker-compose -f $COMPOSE_FILE --project-directory . restart ${@:2}
fi

if [[ $CMD == "rebuild" ]]; then
	docker run --rm -ti -v $PWD:/laradock -w /laradock php:7.2 php src/generate.php
	docker-compose -f $COMPOSE_FILE --project-directory . build --pull --force-rm
	docker-compose -f $COMPOSE_FILE --project-directory . up -d --remove-orphans
fi

if [[ $CMD == "upgrade" ]]; then
	git fetch
	git reset --hard origin/master
	# copy example config files that are missed only
	# existing ones will be preserved
	laradock_init_files "-n"
	docker run --rm --interactive --tty \
		-v $PWD:/app \
		composer install --no-dev --no-progress --no-suggest
	./laradock rebuild
	echo "Laradock upgraded!"
fi
